{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","text","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,UACI,6BAAMD,IACN,uBACIQ,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GACvBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,c,uBCNlBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEH,mCACF,IACG,+BAEXC,EANa,kBAIF,+BAJE,cAMqBC,UAAUH,GAN/B,kBAGL,IAHK,oBAEH,oCAFG,SAOAI,MAAOF,GAPP,cAObG,EAPa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAdtB,kBAkBZM,GAlBY,4CAAH,sDCAPO,EAAc,SAAC,GAAW,IAAVL,EAAS,EAATA,IAClBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,MAAOV,EAAQQ,EAARR,IAElB,OACI,sBAAKc,UAAU,sDAAf,UACI,qBAAcC,IAAMf,EAAKgB,IAAKN,GAApBD,GACV,4BAAKC,QCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAStB,ECTwB,SAAEA,GAC1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OAzBAC,qBAAU,WAENxB,EAASC,GACRwB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CAELf,KAAMkB,EACNL,SAAS,MAEd,UAIR,CAACpB,IAUGqB,EDtBwBM,CAAc3B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OACI,qCACEA,EAAU,2CAAmB,uCAE/B,sBAAKJ,UAAU,YAAf,UACI,6BAAMhB,IAGHa,EAAOJ,KAAK,SAAAC,GAAG,OACJ,cAAC,EAAD,CACaA,IAAOA,GADDA,EAAIC,cESlCiB,EA7BM,WAGjB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OAAQ,qCACA,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAGA,6BAEI8C,EAAWpB,KAAK,SAACT,GAAD,OAAe,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,YCtB7D8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e98101fe.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2 ){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <h1>{ inputValue }</h1>\r\n            <input \r\n                text=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category  ) => {\r\n\r\n    const api_key = 'r87M1DffnDABDUZ0XyxErafQRxBBD4Lm';\r\n    const limit = '5';\r\n    const endpoint = 'api.giphy.com/v1/gifs/search';\r\n    //const url = 'https://api.giphy.com/v1/gifs/search?q=Rick and Morty&limit=10&api_key=r87M1DffnDABDUZ0XyxErafQRxBBD4Lm';\r\n    const url = `https://${ endpoint }?q=${ encodeURI(category) }&limit=${ limit }&api_key=${ api_key }`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({img}) => {\r\n    const {id, title, url } = img;\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__bounce animate__repeat-2\">\r\n            <img key={id} src ={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    \r\n    /* const [images, setImages] = useState([])\r\n\r\n    useEffect(() => {\r\n        getGifs( category ).then( setImages )\r\n    }, [ category ]) */\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n    \r\n\r\n    return (\r\n        <>\r\n        { loading ? <p>Loading...</p> :<p>Loaded</p> }\r\n\r\n        <div className=\"card-grid\">\r\n            <h3>{ category }</h3>\r\n            {\r\n               \r\n               images.map( img => (\r\n                          <GifGridItem key= {img.id} \r\n                                       img = {img}\r\n                            />\r\n                         ))\r\n\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category )\r\n        .then(imgs => {\r\n\r\n            setTimeout(() => {\r\n                setState({\r\n\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            }, 3000)\r\n\r\n        });\r\n\r\n    }, [category])\r\n    \r\n\r\n   /*  setTimeout(()=>{\r\n        setState({\r\n            data:[1,2,3,4,5,6,7],\r\n            loading:false\r\n        });\r\n    }, 3000); */\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const initialState = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    /* const handleAdd = () =>{\r\n        const newCategory = 'Shin-Chan';\r\n        setCategories(cats => [...cats, newCategory]);\r\n    } */\r\n\r\n\r\n\r\n\r\n    return (<>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={ setCategories }/>\r\n\r\n            <hr />\r\n\r\n\r\n            <ol>\r\n            {\r\n                categories.map( (category) => (<GifGrid key={category} category={ category }/>))\r\n            }\r\n            </ol>\r\n            </>);\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n//GifExpertApp \n//<h2>GifExpertApp</h2>\n//</hr>"],"sourceRoot":""}